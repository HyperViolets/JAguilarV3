@page "/Blog/Linux/LinuxDirectories"
<title>Linux Directories</title>

<br />
<br />

<div class="pageFrame">

    <br />

    <hr />
    <h2 class="articleTitle">Linux Directories</h2>

    <p class="generalText"><strong>By Juan Aguilar</strong></p>
    <p class="generalText"><em>September 9, 2019</em></p>
    <hr />

    <br />

    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/LinuxFileSystem.jpg" />
    <p class="generalText">
        The beginning of the Linux file system starts with root (<strong>/</strong>). 
    </p>
    <p class="generalText">
        <strong>/boot</strong> contains the necessary files for the system to boot. Files such as the Linux kernel and GRUB boot loader are stored here. 
    </p>
    <p class="generalText">
        <strong>/dev</strong> contains device nodes for physical hardware and virtual devices. The Linux kernel uses these nodes to complete tasks. Nodes can be in Character (raw) or Block format. Nodes can be SATA drives, graphics cards or etc.
    </p>
    <p class="generalText">
        <strong>/etc</strong> holds the configuration files for the system and programs. It stands for etcetera. If <strong>/etc</strong> stores configuration files then why is it called etc? That’s because it was originally a place to store files that didn’t fit into any other directory. Over time it became the dedicated place to store configuration files and the name stayed the same.
    </p>
    <p class="generalText">
        <strong>/home</strong> holds user home directories. Each user account has a home directory to save personal files. Other users, except root, can’t access another user’s files.
    </p>
    <p class="generalText">
        <strong>/media</strong> is used as the mounting point for removable media such as a CD, USB, Kindle or an external hard drive. When removable media is plugged in, a directory is automatically created for it in the media directory. You can access files of the media through this directory.
    </p>
    <p class="generalText">
        <strong>/mnt</strong> is used as a temporary mount point. Mounting is referred to as attaching another file system which can reside on a hard disk or other storage device. For example, you can mount a Windows partition to do some file recovery.
    </p>
    <p class="generalText">
        <strong>/opt</strong> is where additional software installed is located. It stands for Optional Packages. Mainly, proprietary software is stored here.
    </p>
    <p class="generalText">
        <strong>/proc</strong> is the process file system. It maintains info on the current state of the kernel. Specifically info on the CPU, memory, disks, running processes and etc. It is auto-managed by the system. The contents are created in memory on boot and destroyed at reboot. You can run the command <strong>cat /proc/cpuinfo</strong> to show CPU info. Use <strong>cat /proc/meminfo</strong> for memory info. Other commands such as <strong>top</strong> and <strong>ps</strong> also use the proc directory.
    </p>
    <p class="generalText">
        <strong>/root</strong> is the home directory of the root user. It’s stored here instead of being located in <strong>/home/root</strong>.
    </p>
    <p class="generalText">
        <strong>/run</strong> is used for early-starting daemons like PID files and socket endpoints. Late-starting daemons are handled by <strong>/var/run</strong> for things like Apache.
    </p>
    <p class="generalText">
        <strong>/srv</strong> is used to store files for services. For example, Apache HTML files can be stored here.
    </p>
    <p class="generalText">
        <strong>/sys</strong> is used as an interface for the kernel. It’s used to load kernel modules, creating device nodes, and other system functions.
    </p>
    <p class="generalText">
        <strong>/tmp</strong> is used to store temporary files. These files are deleted at system reboot.
    </p>
    <p class="generalText">
        <strong>/usr</strong> is a read-only location for general system files. It stands for UNIX System Resources.
    </p>
    <p class="generalText">
        <strong>/var</strong> contains files that change constantly, hence the name variable. For example, logs, status, spool, lock and other dynamic data is stored here. It’s used in conjunction with <strong>/usr</strong>. <strong>/usr</strong> is for read-only system content while <strong>/var</strong> is used for writable content.
    </p>

    <br>
    
    <h4 class="articleTitle">File Types</h4>
    <p class="generalText">
        Regular: Text or binary files that begins with “-”. You can create a regular file with the <strong>touch</strong> command. Example: <strong>touch MyFile.txt</strong>.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/RegularFile.png" />
    <p class="generalText">
        Directory: These are logical containers to hold files and sub-directories. They begin with “d”. Create a directory with the <strong>mkdir</strong> command. Example: <strong>mkdir MyVacationImages</strong>.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/DirectoryFile.png" />
    <p class="generalText">
        Symbolic Links: Shortcut for another file or directory. Begins with (l) for link. Will have an arrow pointing to the linked file/directory.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/SymbolicLink.png" />
    <p class="generalText">
        Device: Device nodes start with “c” for Character or “b” for Block. These files can be found in <strong>/dev</strong>.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/DeviceNodes.png" />
    <p class="generalText">
        Local Domain Sockets: Used to communicate between processes. Starts with “s”.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/LocalDomainSocket.png" />
    <p class="generalText">
        Named Pipes: Used to communicate between local processes. Starts with “p”.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/NamedPipes.png" />

    <br>

    <h4 class="articleTitle">Absolute & Relative Pathnames</h4>
    <p class="generalText">
        Absolute pathnames always start with a forward slash (/). They are the full path name. To get your current pathname, use the command <strong>pwd</strong>. It stands for present working directory.
    </p>
    <p class="generalText">
        Relative pathnames never begin with a forward slash (/). They are in relation to your current location.
    </p>

    <br>

    <h4 class="articleTitle">File & Directory Permissions</h4>
    <p class="generalText">
        Using the <strong>ll</strong> command can show you the permissions of a file/directory including other data.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/llOutput.png" />
    <p class="generalText">
        Who the permissions apply to are the file owner (u), the owner’s group (g) and others (o). Others represents everybody else AKA public permissions.
    </p>
    <p class="generalText">
        Permissions are broken up into read permissions (r), write permissions (w) and execute permissions (x). If no permissions is specified then a (-) will be used. The (-) means that they don’t have that permission. Execute permissions dictate whether is person is able to run scripts. In the case of a directory, execute permissions dictate whether they can <strong>cd</strong> into the directory.
    </p>
    <img class="articleImage" src="/images/Blog/Linux/LinuxDirectories/FilePermissions.png" />
    <p class="generalText">
        You can edit permissions through the <strong>chmod</strong> command. You can use <strong>chmod</strong> with octal or symbolic notation. With octal, you specify three numbers. The first number is for the file owner permissions. The second is group and third is others. Example: <strong>chmod 447 MyFile</strong>. The owner and group will only have read permissions while others will have read, write, and execute permissions.
    </p>
    <p class="generalText">
        With symbolic notation you use a combination of [u, g, o], [-, +, =], and [r, w, x]. U, g, and o represent user, group, and others. You can remove (-), add (+), or set (=) permissions. As usual, there are the read (r), write (w), and execute (x) permissions. You can use a combination of these in <strong>chmod</strong>. Example <strong>chmod ug=r MyFile</strong>. This command will set the user and group permission to read-only.
    </p>

    <br>

    <h4 class="articleTitle">References</h4>
    <p class="citation">
        “The /Mnt Directory.” <em>Linfo.org</em>, The Linux Information Project, 13 Feb. 2006, www.linfo.org/mnt.html.
    </p>
    <p class="citation">
        Admin. “Identifying File Types in Linux.” <em>Linux Tutorials - Learn Linux Configuration</em>, 9 June 2016, linuxconfig.org/identifying-file-types-in-linux.
    </p>
    <p class="citation">
        Ghori, Asghar. <em>RHCSA & RHCE Red Hat Enterprise Linux 7: Training and Exam Preparation Guide, Exams EX200 and EX300</em>. Endeavor Technologies, 2015.
    </p>
    <p class="citation">
        Ho, Adrian. “What Is the Significance of the /Run/ Directory in Linux?” <em>Quora</em>, 24 Jan. 2015, www.quora.com/What-is-the-significance-of-the-run-directory-in-Linux.
    </p>
    <p class="citation">
        Hoffman, Chris. “The Linux Directory Structure, Explained.” <em>How-To Geek</em>, How-To Geek, 22 Sept. 2016, www.howtogeek.com/117435/htg-explains-the-linux-directory-structure-explained/.
    </p>
    <p class="citation">
        Surendra, Anne. “Linux Directory Structure:/Etc Explained.” <em>The Linux Juggernaut</em>, 25 Feb. 2016, www.linuxnix.com/linux-directory-structure-explainedetc-folder/.
    </p>

    <br>
</div>

<br />
<br />
