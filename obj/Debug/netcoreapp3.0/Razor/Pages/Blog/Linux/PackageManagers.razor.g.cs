#pragma checksum "/home/juan/Documents/Developing/JAguilarV3/Pages/Blog/Linux/PackageManagers.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "aea23e39976161ee6a6a19d6d370e899fa46542e"
// <auto-generated/>
#pragma warning disable 1591
namespace JAguilarV3.Pages.Blog.Linux
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using JAguilarV3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/home/juan/Documents/Developing/JAguilarV3/_Imports.razor"
using JAguilarV3.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Blog/Linux/PackageManagers")]
    public class PackageManagers : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<title>Package Managers</title>\n\n<br>\n<br>\n\n");
            __builder.AddMarkupContent(1, "<div class=\"pageFrame\">\n\n    <br>\n\n    <hr>\n    <h2 class=\"articleTitle\">A Brief Overview: Packages, Package Managers, Repositories, and PPAs</h2>\n\n    <p class=\"generalText\"><strong>By Juan Aguilar</strong></p>\n    <p class=\"generalText\"><em>June 26, 2019</em></p>\n    <hr>\n\n    <br>\n\n    <h4 class=\"articleTitle\">Packages</h4>\n    <p class=\"generalText\">\n        A package is a way to neatly distribute software. Packages are a collection of files that contain the software and metadata. Metadata includes the name, version, vendor, checksum, dependencies and so on. A dependency is another package that the software needs in order to work correctly. A package manager will manage the dependencies and make sure there are no duplicates. Packages are in binary format that can be read by computes. There are different binary package formats. The .deb package format is used by Debian, Ubuntu, Linux Mint and etc. Another format is .rpm which is commonly used by Red Hat, Fedora, and SUSE. Arch Linux uses a compressed tarball (.tar.xz). \n    </p>\n    <p class=\"generalText\">\n        Packages are much easier to maintain than compiling software from source.  Software from source is formatted in a coding language readable by humans. This source code needs to be compiled into binary for computers. Software compiled from source isn’t managed by Package Managers by default. However, there is software out there like CheckInstall & Gentoo Linux that will add compiled software to Package Managers.\n    </p>\n\n    <h4 class=\"articleTitle\">Personal Package Archive: PPA</h4>\n    <p class=\"generalText\">\n        A PPA (Personal Package Archive) is a type of package for software. They are similar to .deb or .rpm packages. PPAs are private repositories made by software developers. Typically, it takes a while to add a package to an official repository. To quickly distribute software, developers use a PPA. This way software doesn’t have to wait to be approved on an official repository. A PPA is in the <strong>ppa:[username]/[appname]</strong> format. To add a PPA to your repository list use: <strong>sudo add-apt-repository ppa:[user]/[appname]</strong>.\n    </p>\n\n    <h4 class=\"articleTitle\">Repositories</h4>\n    <p class=\"generalText\">\n        A repository is a remote storage location for packages. Most of the software for Linux resides in a repository. They provide a central place to get software. Unlike Windows where you would have to go to each application’s website to get the software. Having software in repositories makes managing software less obnoxious than Windows. The official Linux repositories are very well maintained. Teams regularly update, fix security holes, and manage them.\n    </p>\n\n    <h4 class=\"articleTitle\">Package Managers</h4>\n    <p class=\"generalText\">\n        On Linux, you install and manage software through a package manager. Package Managers help manage packages obtained through a repository. Through a Package Manager you can get packages through command line or a GUI interface like the Ubuntu Software Center. There are different types of Package Managers for different Linux flavors. Linux distributions like Ubuntu will use APT (Advanced Package Tool). CentOS similar distributions will use YUM (Yellowdog Updater, Modified) or DNF/Dandified YUM. Arch uses pacman. There are also alternative package managers available to you.\n    </p>\n    <p class=\"generalText\">\n        The upside to Package Managers is having to update software in one central place. Instead of manually updating each application, you only have to use the Package Manager. For example, to update software on Ubuntu you would run: <strong>sudo apt-get upgrade</strong>. That command installs the latest version of all packages currently installed. \n    </p>\n\n    <h4 class=\"articleTitle\">References</h4>\n    <p class=\"citation\">\n        Ovens, Steve. “The Evolution of Package Managers.” <em>Opensource.com</em>, 26 July 2018, opensource.com/article/18/7/evolution-package-managers.\n    </p>\n    <p class=\"citation\">\n        “Package Manager.” <em>Wikipedia</em>, Wikimedia Foundation, 24 June 2019, en.wikipedia.org/wiki/Package_manager.\n    </p>\n    <p class=\"citation\">\n        “Repositories.” <em>Repositories- Community Help Wiki</em>, 26 June 2019, help.ubuntu.com/community/Repositories.\n    </p>\n    <p class=\"citation\">\n        “Ubuntu Documentation.” <em>AptGet/Howto- Community Help Wiki</em>, 26 June 2019, help.ubuntu.com/community/AptGet/Howto?action=show&redirect=AptGetHowto.\n    </p>\n    <p class=\"citation\">\n        “Ubuntu Documentation.” <em>InstallingSoftware- Community Help Wiki</em>, 26 June 2019, help.ubuntu.com/community/InstallingSoftware.\n    </p>\n    <p class=\"citation\">\n        “Ubuntu Documentation.” <em>Repositories/CommandLine- Community Help Wiki</em>, 26 June 2019, help.ubuntu.com/community/Repositories/CommandLine.\n    </p>\n    <p class=\"citation\">\n        “Ubuntu Documentation.” <em>Repositories/Ubuntu- Community Help Wiki</em>, 26 June 2019, help.ubuntu.com/community/Repositories/Ubuntu.\n    </p>\n    <p class=\"citation\">\n        Wohlscheid, John Paul. “Why Windows Needs a Package Manager.” <em>Hacker Noon</em>, Hacker Noon, 11 Jan. 2017, hackernoon.com/why-windows-needs-a-package-manager-3868cffdec24.\n    </p>\n\n    <br>\n</div>\n\n<br>\n<br>");
        }
        #pragma warning restore 1998
    }
}
#pragma warning restore 1591
